-----@type function
--local inspect = require("IO/inspect")

-- todo: add event callback names into tts-types
--- Creates and a handler that will be called with every event trigger until its coroutine returns, then removed.
---@param event string
---@param name string
---@param co function | thread
---@param co function
---@param finally nil | function @A function to call after the coroutine is done.
---@return function @Returns the created/added handler
local function addCancellableCoroHandler(event, name, co, cancel, finally)
	if type(co) ~= "thread" then
		co = coroutine.create(co)
	end

	if coroutine.status(co) == "dead" then
		error("addCoroHandler(): stop stop he's already dead")
	end

	if activeHandlers[name] then
		error("addCoroHandler(): already have a handler with name " .. name)
	end

	local handler ---@type function

	handler = function(...)
		-- check if the coroutine has returned since last resume
		if coroutine.status(co) == "dead" then
			log("addCoroHandler(): the coroutine yielded while we weren't looking!")
			EventManager.removeHandler(event, handler)
			return
		end

		-- credit to sharpo https://discordapp.com/channels/561645196757041163/561645230672183310/724161820163833878
		local function check_and_call(cb, ok, ...)
			if ok then
				if coroutine.status(co) == "dead" then
					EventManager.removeHandler(event, handler)
					openHandlers[event][handler] = nil
					cb(...)
				end
			else
				error("addCoroHandler(): error in check_and_call: ") -- .. inspect({...}))
			end
		end
		check_and_call(finally, coroutine.resume(co))
	end

	EventManager.addHandler(event, handler)
	return handler
end

return { addCoroHandler = addCoroHandler, results = activeHandlers, cancellable = cancellable}
